---
import { schemaJson } from "./lib/structuredData";
import {
  generateCrumbs,
  mergeCustomizedLinks,
  customizeListElement,
} from "./lib/generateCrumbs";
import BreadcrumbLink from "./BreadcrumbLink.astro";
import BreadcrumbSeparator from "./BreadcrumbSeparator.astro";
import type { BreadcrumbsProps } from "./breadcrumbs.types.ts";
import { isLastElement, truncatedButtonVisible } from "./lib/helper.ts";
import { debugInformation } from "./lib/debug.ts";

const {
  indexText = "Home",
  mainBemClass = "c-breadcrumbs",
  ariaLabel = "breadcrumbs",
  crumbs = [],
  customizeLinks = [],
  customizeListElements = [],
  customizeList = {},
  customizeNav = {},
  schemaJsonScript = true,
  ellipsisAriaLabel = "Show hidden navigation",
  truncated = false,
  linkTextFormat,
  customBaseUrl,
  excludeCurrentPage = false,
  debug = false,
  separatorAriaHidden = true,
} = Astro.props as BreadcrumbsProps;

const paths = Astro.url.pathname.split("/").filter((crumb: any) => crumb);
const hasTrailingSlash = Astro.url.pathname.endsWith("/");
const pathLength = paths?.length;
const UUID = crypto.randomUUID();
const listCssClasses = [
  `${mainBemClass}__crumbs`,
  Astro.slots.has("separator") ? " has-separators" : " has-no-separators",
];

const parts = generateCrumbs({
  crumbs,
  paths,
  indexText,
  hasTrailingSlash,
  linkTextFormat,
  customBaseUrl,
  excludeCurrentPage,
});

const customizedParts = mergeCustomizedLinks(parts, customizeLinks);

const processedParts = customizedParts
  .map((part, index, array) => {
    const isLast = isLastElement(index, array);
    const showTruncatedButton = truncatedButtonVisible(
      truncated,
      index,
      pathLength,
    );

    return { ...part, isLast, showTruncatedButton };
  })
  .filter((part) => !(excludeCurrentPage && part.isLast)); // Filter out the last element if excludeCurrentPage is true

debugInformation(debug, parts, customizedParts);
---

<astro-breadcrumbs
  data-main-bem-class={mainBemClass}
  data-id={UUID}
  data-path-length={pathLength}
  data-truncated={truncated}
>
  <nav aria-label={ariaLabel} class={mainBemClass} id={UUID} {...customizeNav}>
    <ol class:list={listCssClasses} {...customizeList}>
      {
        processedParts.map(
          ({ text, isLast, showTruncatedButton, ...attrs }, index) => {
            return (
              <>
                {showTruncatedButton && (
                  <li
                    class={`${mainBemClass}__crumb has-ellipsis`}
                    {...customizeListElements[1]}
                  >
                    <button
                      type="button"
                      aria-label={ellipsisAriaLabel}
                      class={`${mainBemClass}__truncated-button`}
                    >
                      <slot name="ellipsis">â€¦</slot>
                    </button>
                    <BreadcrumbSeparator
                      mainBemClass={mainBemClass}
                      separatorAriaHidden={separatorAriaHidden}
                    >
                      <slot name="separator" slot="seperator" />
                    </BreadcrumbSeparator>
                  </li>
                )}
                <li
                  class={`${mainBemClass}__crumb`}
                  {...customizeListElement(
                    index,
                    showTruncatedButton,
                    customizeListElements,
                  )}
                >
                  <BreadcrumbLink
                    attrs={attrs}
                    mainBemClass={mainBemClass}
                    isIndex={index === 0}
                    isCurrent={isLast}
                  >
                    {Astro.slots.has("index") && index === 0 ? (
                      <slot name="index" slot="index" />
                    ) : (
                      decodeURI(text)
                    )}
                  </BreadcrumbLink>

                  {Astro.slots.has("separator") && !isLast && (
                    <BreadcrumbSeparator
                      mainBemClass={mainBemClass}
                      separatorAriaHidden={separatorAriaHidden}
                    >
                      <slot name="separator" slot="separator" />
                    </BreadcrumbSeparator>
                  )}
                </li>
              </>
            );
          },
        )
      }
    </ol>
  </nav>
</astro-breadcrumbs>
{
  schemaJsonScript && (
    <script type="application/ld+json" set:html={schemaJson(customizedParts)} />
  )
}

<script>
  import { Truncated } from "./lib/truncated";

  if (!customElements.get("astro-breadcrumbs")) {
    customElements.define("astro-breadcrumbs", Truncated);
  }
</script>
